tui.util.defineNamespace("fedoc.content", {});
fedoc.content["detectors.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Mixin modules\n * @dependency code-snippet.js, appLoader.js\n * @author NHN Ent. FE dev team.&lt;dl_javascript@nhnent.com>\n */\n'use strict';\n/**\n * @namespace Detector\n */\nvar Detector = {\n    /**\n     * for timer\n     */\n    TIMEOUT: {\n        IOS: 2000,\n        ANDROID: 800,\n        INTERVAL: 100\n    },\n\n    /**\n     * Id for support frame\n     */\n    SUPPORT_FRAME_ID: 'tui-support-frame',\n\n    /**\n     * Move page\n     * @param {string} url - URL\n     * @memberof Detector\n     */\n    moveTo: function(url) {\n        top.location.href = url;\n    },\n\n    /**\n     * Call app by iframe\n     * @param {string} url - App url\n     * @returns {HTMLElement} IFrame\n     */\n    runAppWithIframe: function (url) {\n        var self = this,\n            iframe = self.createSupportFrame();\n\n        iframe.src = url;\n        document.body.appendChild(iframe);\n        return iframe;\n    },\n\n    /**\n     * Create iframe\n     * @returns {HTMLElement} IFrame\n     */\n    createSupportFrame: function () {\n        var iframe = document.createElement('iframe');\n        tui.util.extend(iframe, {\n            id: this.SUPPORT_FRAME_ID,\n            frameborder: '0',\n            width: '0',\n            height: '0'\n        });\n        iframe.style.display = 'none';\n        return iframe;\n    },\n\n    /**\n     * Defer call callback\n     * @param {function} callback A callback\n     * @param {number} time A delay time\n     * @returns {number|undefined} Timer id\n     */\n    deferCallback: function (callback, time) {\n        var clickedAt = new Date().getTime(),\n            now,\n            self = this;\n\n        if (!tui.util.isFunction(callback)) {\n            return;\n        }\n\n        return setTimeout(function () {\n            now = new Date().getTime();\n            if (self.isPageVisibility() &amp;&amp; now - clickedAt &lt; time + self.TIMEOUT.INTERVAL) {\n                callback();\n            }\n        }, time);\n    },\n\n    /**\n     * check a webpage is visible or in focus\n     * @returns {boolean} Page visibility\n     */\n    isPageVisibility: function () {\n        if (tui.util.isExisty(document.hidden)) {\n            return !document.hidden;\n        }\n        if (tui.util.isExisty(document.webkitHidden)) {\n            return !document.webkitHidden;\n        }\n        return true;\n    }\n};\n\n/****************\n * Android series\n ****************/\n\n/**\n * Android intent less\n * @namespace Detector.androidSchemeDetector\n */\nDetector.androidSchemeDetector = tui.util.extend({\n    /**\n     * detector type\n     * @memberof Detector.androidSchemeDetector\n     */\n    type: 'scheme',\n\n    /**\n     * Run detector\n     * @deprecated\n     * @param {object} context - Data for running\n     * @memberof Detector.androidSchemeDetector\n     */\n    run: function(context) {\n        var notFoundCallback = context.notFoundCallback;\n\n        if (notFoundCallback) {\n            this.deferCallback(notFoundCallback, this.TIMEOUT.ANDROID);\n        }\n        this.runAppWithIframe(context.urlScheme);\n    }\n}, Detector);\n\n\n/**\n * Android intent\n * @namespace Detector.androidIntentDetector\n */\nDetector.androidIntentDetector = tui.util.extend({\n    /**\n     * detector type\n     * @memberof Detector.androidIntentDetector\n     */\n    type: 'intent',\n\n    // Force iframe\n    launchViaIframe: function(intentURI, notFoundCallback, onErrorIframe) {\n        var iframe = this.runAppWithIframe(intentURI), // Launch app via iframe\n            timeoutId = this.deferCallback(notFoundCallback, this.TIMEOUT.ANDROID);\n\n        setTimeout(function() {\n            try {\n                // Whether broswer supports intentURI with iframe and without error.\n                if (iframe &amp;&amp; iframe.contentDocument.body) {\n                    document.body.removeChild(iframe);\n                }\n            } catch (e) {\n                // If browser caught an error(accessing to error page in iframe),\n                //  this component cannot judge the app is installed or not.\n                document.body.removeChild(iframe);\n                clearTimeout(timeoutId);\n                if (tui.util.isFunction(onErrorIframe)) {\n                    onErrorIframe();\n                }\n            }\n        }, 100);\n    },\n\n    /**\n     * Run detector\n     * @param {object} context - Data for running\n     * @memberof Detector.androidIntentDetector\n     */\n    run: function(context) {\n        var notFoundCallback = context.notFoundCallback,\n            intentURI = context.intentURI;\n\n        if (context.useIframe) {\n            this.launchViaIframe(intentURI, notFoundCallback, context.onErrorIframe);\n        } else {\n            this.moveTo(intentURI);\n            this.deferCallback(notFoundCallback, this.TIMEOUT.ANDROID);\n        }\n    }\n}, Detector);\nmodule.exports = Detector;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"