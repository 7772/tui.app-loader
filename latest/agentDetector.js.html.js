tui.util.defineNamespace("fedoc.content", {});
fedoc.content["agentDetector.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n* @fileoverview The extractor and detector user agent by device info.\n* @dependency code-snippet.js, appLoader.js\n* @author NHN Entertain ment. FE dev team.\n*/\n\n/**\n * @constructor\n */\nvar AgentDetector = tui.util.defineClass(/**@lends AgentDetector.prototype */{\n    cache: {},\n    /***************\n     * RegExp processing start : original - 출처 mobile-detect.js @link [https://github.com/hgoebl/mobile-detect.js]\n     ***************/\n    /**\n     * Each device info and os reg string\n     */\n    mobileRegText: {\n        'phones': {\n            'iPhone': '\\\\biPhone\\\\b|\\\\biPod\\\\b',\n            'BlackBerry': 'BlackBerry|\\\\bBB10\\\\b|rim[0-9]+',\n            'HTC': 'HTC|HTC.*(Sensation|Evo|Vision|Explorer|6800|8100|8900|A7272|S510e|C110e|Legend|Desire|T8282)|APX515CKT|Qtek9090|APA9292KT|HD_mini|Sensation.*Z710e|PG86100|Z715e|Desire.*(A8181|HD)|ADR6200|ADR6400L|ADR6425|001HT|Inspire 4G|Android.*\\\\bEVO\\\\b|T-Mobile G1|Z520m',\n            'Nexus': 'Nexus One|Nexus S|Galaxy.*Nexus|Android.*Nexus.*Mobile|Nexus 4|Nexus 5|Nexus 6',\n            'Dell': 'Dell.*Streak|Dell.*Aero|Dell.*Venue|DELL.*Venue Pro|Dell Flash|Dell Smoke|Dell Mini 3iX|XCD28|XCD35|\\\\b001DL\\\\b|\\\\b101DL\\\\b|\\\\bGS01\\\\b',\n            'Motorola': 'Motorola|DROIDX|DROID BIONIC|\\\\bDroid\\\\b.*Build|Android.*Xoom|HRI39|MOT-|A1260|A1680|A555|A853|A855|A953|A955|A956|Motorola.*ELECTRIFY|Motorola.*i1|i867|i940|MB200|MB300|MB501|MB502|MB508|MB511|MB520|MB525|MB526|MB611|MB612|MB632|MB810|MB855|MB860|MB861|MB865|MB870|ME501|ME502|ME511|ME525|ME600|ME632|ME722|ME811|ME860|ME863|ME865|MT620|MT710|MT716|MT720|MT810|MT870|MT917|Motorola.*TITANIUM|WX435|WX445|XT300|XT301|XT311|XT316|XT317|XT319|XT320|XT390|XT502|XT530|XT531|XT532|XT535|XT603|XT610|XT611|XT615|XT681|XT701|XT702|XT711|XT720|XT800|XT806|XT860|XT862|XT875|XT882|XT883|XT894|XT901|XT907|XT909|XT910|XT912|XT928|XT926|XT915|XT919|XT925',\n            'Samsung': 'Samsung|SGH-I337|BGT-S5230|GT-B2100|GT-B2700|GT-B2710|GT-B3210|GT-B3310|GT-B3410|GT-B3730|GT-B3740|GT-B5510|GT-B5512|GT-B5722|GT-B6520|GT-B7300|GT-B7320|GT-B7330|GT-B7350|GT-B7510|GT-B7722|GT-B7800|GT-C3010|GT-C3011|GT-C3060|GT-C3200|GT-C3212|GT-C3212I|GT-C3262|GT-C3222|GT-C3300|GT-C3300K|GT-C3303|GT-C3303K|GT-C3310|GT-C3322|GT-C3330|GT-C3350|GT-C3500|GT-C3510|GT-C3530|GT-C3630|GT-C3780|GT-C5010|GT-C5212|GT-C6620|GT-C6625|GT-C6712|GT-E1050|GT-E1070|GT-E1075|GT-E1080|GT-E1081|GT-E1085|GT-E1087|GT-E1100|GT-E1107|GT-E1110|GT-E1120|GT-E1125|GT-E1130|GT-E1160|GT-E1170|GT-E1175|GT-E1180|GT-E1182|GT-E1200|GT-E1210|GT-E1225|GT-E1230|GT-E1390|GT-E2100|GT-E2120|GT-E2121|GT-E2152|GT-E2220|GT-E2222|GT-E2230|GT-E2232|GT-E2250|GT-E2370|GT-E2550|GT-E2652|GT-E3210|GT-E3213|GT-I5500|GT-I5503|GT-I5700|GT-I5800|GT-I5801|GT-I6410|GT-I6420|GT-I7110|GT-I7410|GT-I7500|GT-I8000|GT-I8150|GT-I8160|GT-I8190|GT-I8320|GT-I8330|GT-I8350|GT-I8530|GT-I8700|GT-I8703|GT-I8910|GT-I9000|GT-I9001|GT-I9003|GT-I9010|GT-I9020|GT-I9023|GT-I9070|GT-I9082|GT-I9100|GT-I9103|GT-I9220|GT-I9250|GT-I9300|GT-I9305|GT-I9500|GT-I9505|GT-M3510|GT-M5650|GT-M7500|GT-M7600|GT-M7603|GT-M8800|GT-M8910|GT-N7000|GT-S3110|GT-S3310|GT-S3350|GT-S3353|GT-S3370|GT-S3650|GT-S3653|GT-S3770|GT-S3850|GT-S5210|GT-S5220|GT-S5229|GT-S5230|GT-S5233|GT-S5250|GT-S5253|GT-S5260|GT-S5263|GT-S5270|GT-S5300|GT-S5330|GT-S5350|GT-S5360|GT-S5363|GT-S5369|GT-S5380|GT-S5380D|GT-S5560|GT-S5570|GT-S5600|GT-S5603|GT-S5610|GT-S5620|GT-S5660|GT-S5670|GT-S5690|GT-S5750|GT-S5780|GT-S5830|GT-S5839|GT-S6102|GT-S6500|GT-S7070|GT-S7200|GT-S7220|GT-S7230|GT-S7233|GT-S7250|GT-S7500|GT-S7530|GT-S7550|GT-S7562|GT-S7710|GT-S8000|GT-S8003|GT-S8500|GT-S8530|GT-S8600|SCH-A310|SCH-A530|SCH-A570|SCH-A610|SCH-A630|SCH-A650|SCH-A790|SCH-A795|SCH-A850|SCH-A870|SCH-A890|SCH-A930|SCH-A950|SCH-A970|SCH-A990|SCH-I100|SCH-I110|SCH-I400|SCH-I405|SCH-I500|SCH-I510|SCH-I515|SCH-I600|SCH-I730|SCH-I760|SCH-I770|SCH-I830|SCH-I910|SCH-I920|SCH-I959|SCH-LC11|SCH-N150|SCH-N300|SCH-R100|SCH-R300|SCH-R351|SCH-R400|SCH-R410|SCH-T300|SCH-U310|SCH-U320|SCH-U350|SCH-U360|SCH-U365|SCH-U370|SCH-U380|SCH-U410|SCH-U430|SCH-U450|SCH-U460|SCH-U470|SCH-U490|SCH-U540|SCH-U550|SCH-U620|SCH-U640|SCH-U650|SCH-U660|SCH-U700|SCH-U740|SCH-U750|SCH-U810|SCH-U820|SCH-U900|SCH-U940|SCH-U960|SCS-26UC|SGH-A107|SGH-A117|SGH-A127|SGH-A137|SGH-A157|SGH-A167|SGH-A177|SGH-A187|SGH-A197|SGH-A227|SGH-A237|SGH-A257|SGH-A437|SGH-A517|SGH-A597|SGH-A637|SGH-A657|SGH-A667|SGH-A687|SGH-A697|SGH-A707|SGH-A717|SGH-A727|SGH-A737|SGH-A747|SGH-A767|SGH-A777|SGH-A797|SGH-A817|SGH-A827|SGH-A837|SGH-A847|SGH-A867|SGH-A877|SGH-A887|SGH-A897|SGH-A927|SGH-B100|SGH-B130|SGH-B200|SGH-B220|SGH-C100|SGH-C110|SGH-C120|SGH-C130|SGH-C140|SGH-C160|SGH-C170|SGH-C180|SGH-C200|SGH-C207|SGH-C210|SGH-C225|SGH-C230|SGH-C417|SGH-C450|SGH-D307|SGH-D347|SGH-D357|SGH-D407|SGH-D415|SGH-D780|SGH-D807|SGH-D980|SGH-E105|SGH-E200|SGH-E315|SGH-E316|SGH-E317|SGH-E335|SGH-E590|SGH-E635|SGH-E715|SGH-E890|SGH-F300|SGH-F480|SGH-I200|SGH-I300|SGH-I320|SGH-I550|SGH-I577|SGH-I600|SGH-I607|SGH-I617|SGH-I627|SGH-I637|SGH-I677|SGH-I700|SGH-I717|SGH-I727|SGH-i747M|SGH-I777|SGH-I780|SGH-I827|SGH-I847|SGH-I857|SGH-I896|SGH-I897|SGH-I900|SGH-I907|SGH-I917|SGH-I927|SGH-I937|SGH-I997|SGH-J150|SGH-J200|SGH-L170|SGH-L700|SGH-M110|SGH-M150|SGH-M200|SGH-N105|SGH-N500|SGH-N600|SGH-N620|SGH-N625|SGH-N700|SGH-N710|SGH-P107|SGH-P207|SGH-P300|SGH-P310|SGH-P520|SGH-P735|SGH-P777|SGH-Q105|SGH-R210|SGH-R220|SGH-R225|SGH-S105|SGH-S307|SGH-T109|SGH-T119|SGH-T139|SGH-T209|SGH-T219|SGH-T229|SGH-T239|SGH-T249|SGH-T259|SGH-T309|SGH-T319|SGH-T329|SGH-T339|SGH-T349|SGH-T359|SGH-T369|SGH-T379|SGH-T409|SGH-T429|SGH-T439|SGH-T459|SGH-T469|SGH-T479|SGH-T499|SGH-T509|SGH-T519|SGH-T539|SGH-T559|SGH-T589|SGH-T609|SGH-T619|SGH-T629|SGH-T639|SGH-T659|SGH-T669|SGH-T679|SGH-T709|SGH-T719|SGH-T729|SGH-T739|SGH-T746|SGH-T749|SGH-T759|SGH-T769|SGH-T809|SGH-T819|SGH-T839|SGH-T919|SGH-T929|SGH-T939|SGH-T959|SGH-T989|SGH-U100|SGH-U200|SGH-U800|SGH-V205|SGH-V206|SGH-X100|SGH-X105|SGH-X120|SGH-X140|SGH-X426|SGH-X427|SGH-X475|SGH-X495|SGH-X497|SGH-X507|SGH-X600|SGH-X610|SGH-X620|SGH-X630|SGH-X700|SGH-X820|SGH-X890|SGH-Z130|SGH-Z150|SGH-Z170|SGH-ZX10|SGH-ZX20|SHW-M110|SPH-A120|SPH-A400|SPH-A420|SPH-A460|SPH-A500|SPH-A560|SPH-A600|SPH-A620|SPH-A660|SPH-A700|SPH-A740|SPH-A760|SPH-A790|SPH-A800|SPH-A820|SPH-A840|SPH-A880|SPH-A900|SPH-A940|SPH-A960|SPH-D600|SPH-D700|SPH-D710|SPH-D720|SPH-I300|SPH-I325|SPH-I330|SPH-I350|SPH-I500|SPH-I600|SPH-I700|SPH-L700|SPH-M100|SPH-M220|SPH-M240|SPH-M300|SPH-M305|SPH-M320|SPH-M330|SPH-M350|SPH-M360|SPH-M370|SPH-M380|SPH-M510|SPH-M540|SPH-M550|SPH-M560|SPH-M570|SPH-M580|SPH-M610|SPH-M620|SPH-M630|SPH-M800|SPH-M810|SPH-M850|SPH-M900|SPH-M910|SPH-M920|SPH-M930|SPH-N100|SPH-N200|SPH-N240|SPH-N300|SPH-N400|SPH-Z400|SWC-E100|SCH-i909|GT-N7100|GT-N7105|SCH-I535|SM-N900A|SGH-I317|SGH-T999L|GT-S5360B|GT-I8262|GT-S6802|GT-S6312|GT-S6310|GT-S5312|GT-S5310|GT-I9105|GT-I8510|GT-S6790N|SM-G7105|SM-N9005|GT-S5301|GT-I9295|GT-I9195|SM-C101|GT-S7392|GT-S7560|GT-B7610|GT-I5510|GT-S7582|GT-S7530E|GT-I8750|SM-G9006V|SM-G9008V|SM-G9009D|SM-G900A|SM-G900D|SM-G900F|SM-G900H|SM-G900I|SM-G900J|SM-G900K|SM-G900L|SM-G900M|SM-G900P|SM-G900R4|SM-G900S|SM-G900T|SM-G900V|SM-G900W8',\n            'LG': '\\\\bLG\\\\b;|LG[- ]?(C800|C900|E400|E610|E900|E-900|F160|F180K|F180L|F180S|730|855|L160|LS740|LS840|LS970|LU6200|MS690|MS695|MS770|MS840|MS870|MS910|P500|P700|P705|VM696|AS680|AS695|AX840|C729|E970|GS505|272|C395|E739BK|E960|L55C|L75C|LS696|LS860|P769BK|P350|P500|P509|P870|UN272|US730|VS840|VS950|LN272|LN510|LS670|LS855|LW690|MN270|MN510|P509|P769|P930|UN200|UN270|UN510|UN610|US670|US740|US760|UX265|UX840|VN271|VN530|VS660|VS700|VS740|VS750|VS910|VS920|VS930|VX9200|VX11000|AX840A|LW770|P506|P925|P999|E612|D955|D802)',\n            'Sony': 'SonyST|SonyLT|SonyEricsson|SonyEricssonLT15iv|LT18i|E10i|LT28h|LT26w|SonyEricssonMT27i|C5303|C6902|C6903|C6906|C6943|D2533',\n            'Asus': 'Asus.*Galaxy|PadFone.*Mobile',\n            'Micromax': 'Micromax.*\\\\b(A210|A92|A88|A72|A111|A110Q|A115|A116|A110|A90S|A26|A51|A35|A54|A25|A27|A89|A68|A65|A57|A90)\\\\b',\n            'Palm': 'PalmSource|Palm',\n            'Vertu': 'Vertu|Vertu.*Ltd|Vertu.*Ascent|Vertu.*Ayxta|Vertu.*Constellation(F|Quest)?|Vertu.*Monika|Vertu.*Signature',\n            'Pantech': 'PANTECH|IM-A850S|IM-A840S|IM-A830L|IM-A830K|IM-A830S|IM-A820L|IM-A810K|IM-A810S|IM-A800S|IM-T100K|IM-A725L|IM-A780L|IM-A775C|IM-A770K|IM-A760S|IM-A750K|IM-A740S|IM-A730S|IM-A720L|IM-A710K|IM-A690L|IM-A690S|IM-A650S|IM-A630K|IM-A600S|VEGA PTL21|PT003|P8010|ADR910L|P6030|P6020|P9070|P4100|P9060|P5000|CDM8992|TXT8045|ADR8995|IS11PT|P2030|P6010|P8000|PT002|IS06|CDM8999|P9050|PT001|TXT8040|P2020|P9020|P2000|P7040|P7000|C790',\n            'Fly': 'IQ230|IQ444|IQ450|IQ440|IQ442|IQ441|IQ245|IQ256|IQ236|IQ255|IQ235|IQ245|IQ275|IQ240|IQ285|IQ280|IQ270|IQ260|IQ250',\n            'Wiko': 'KITE 4G|HIGHWAY|GETAWAY|STAIRWAY|DARKSIDE|DARKFULL|DARKNIGHT|DARKMOON|SLIDE|WAX 4G|RAINBOW|BLOOM|SUNSET|GOA|LENNY|BARRY|IGGY|OZZY|CINK FIVE|CINK PEAX|CINK PEAX 2|CINK SLIM|CINK SLIM 2|CINK +|CINK KING|CINK PEAX|CINK SLIM|SUBLIM',\n            'iMobile': 'i-mobile (IQ|i-STYLE|idea|ZAA|Hitz)',\n            'SimValley': '\\\\b(SP-80|XT-930|SX-340|XT-930|SX-310|SP-360|SP60|SPT-800|SP-120|SPT-800|SP-140|SPX-5|SPX-8|SP-100|SPX-8|SPX-12)\\\\b',\n            'Wolfgang': 'AT-B24D|AT-AS50HD|AT-AS40W|AT-AS55HD|AT-AS45q2|AT-B26D|AT-AS50Q',\n            'Alcatel': 'Alcatel',\n            'Nintendo': 'Nintendo 3DS',\n            'Amoi': 'Amoi',\n            'INQ': 'INQ',\n            'GenericPhone': 'Tapatalk|PDA;|SAGEM|\\\\bmmp\\\\b|pocket|\\\\bpsp\\\\b|symbian|Smartphone|smartfon|treo|up.browser|up.link|vodafone|\\\\bwap\\\\b|nokia|Series40|Series60|S60|SonyEricsson|N900|MAUI.*WAP.*Browser'\n        },\n        'oss': {\n            'AndroidOS': 'Android',\n            'BlackBerryOS': 'blackberry|\\\\bBB10\\\\b|rim tablet os',\n            'PalmOS': 'PalmOS|avantgo|blazer|elaine|hiptop|palm|plucker|xiino',\n            'SymbianOS': 'Symbian|SymbOS|Series60|Series40|SYB-[0-9]+|\\\\bS60\\\\b',\n            'WindowsMobileOS': 'Windows CE.*(PPC|Smartphone|Mobile|[0-9]{3}x[0-9]{3})|Window Mobile|Windows Phone [0-9.]+|WCE;',\n            'WindowsPhoneOS': 'Windows Phone 8.0|Windows Phone OS|XBLWP7|ZuneWP7|Windows NT 6.[23]; ARM;',\n            'iOS': '\\\\biPhone.*Mobile|\\\\biPod|\\\\biPad',\n            'MeeGoOS': 'MeeGo',\n            'MaemoOS': 'Maemo',\n            'JavaOS': 'J2ME\\/|\\\\bMIDP\\\\b|\\\\bCLDC\\\\b',\n            'webOS': 'webOS|hpwOS',\n            'badaOS': '\\\\bBada\\\\b',\n            'BREWOS': 'BREW'\n        },\n        'uas': {\n            'Chrome': '\\\\bCrMo\\\\b|CriOS|Android.*Chrome\\/[.0-9]* (Mobile)?',\n            'Dolfin': '\\\\bDolfin\\\\b',\n            'Opera': 'Opera.*Mini|Opera.*Mobi|Android.*Opera|Mobile.*OPR\\/[0-9.]+|Coast\\/[0-9.]+',\n            'Skyfire': 'Skyfire',\n            'IE': 'IEMobile|MSIEMobile',\n            'Firefox': 'fennec|firefox.*maemo|(Mobile|Tablet).*Firefox|Firefox.*Mobile',\n            'Bolt': 'bolt',\n            'TeaShark': 'teashark',\n            'Blazer': 'Blazer',\n            'Safari': 'Version.*Mobile.*Safari|Safari.*Mobile|MobileSafari',\n            'Tizen': 'Tizen',\n            'UCBrowser': 'UC.*Browser|UCWEB',\n            'baiduboxapp': 'baiduboxapp',\n            'baidubrowser': 'baidubrowser',\n            'DiigoBrowser': 'DiigoBrowser',\n            'Puffin': 'Puffin',\n            'Mercury': '\\\\bMercury\\\\b',\n            'ObigoBrowser': 'Obigo',\n            'NetFront': 'NF-Browser',\n            'GenericBrowser': 'NokiaBrowser|OviBrowser|OneBrowser|TwonkyBeamBrowser|SEMC.*Browser|FlyFlow|Minimo|NetFront|Novarra-Vision|MQQBrowser|MicroMessenger'\n        },\n        'props': {\n            'Mobile': 'Mobile\\/[VER]',\n            'Build': 'Build\\/[VER]',\n            'Version': 'Version\\/[VER]',\n            'VendorID': 'VendorID\\/[VER]',\n            'iPad': 'iPad.*CPU[a-z ]+[VER]',\n            'iPhone': 'iPhone.*CPU[a-z ]+[VER]',\n            'iPod': 'iPod.*CPU[a-z ]+[VER]',\n            'Kindle': 'Kindle\\/[VER]',\n            'Chrome': [\n                'Chrome\\/[VER]',\n                'CriOS\\/[VER]',\n                'CrMo\\/[VER]'\n            ],\n            'Coast': [\n                'Coast\\/[VER]'\n            ],\n            'Dolfin': 'Dolfin\\/[VER]',\n            'Firefox': 'Firefox\\/[VER]',\n            'Fennec': 'Fennec\\/[VER]',\n            'IE': [\n                'IEMobile\\/[VER];',\n                'IEMobile [VER]',\n                'MSIE [VER];'\n            ],\n            'NetFront': 'NetFront\\/[VER]',\n            'NokiaBrowser': 'NokiaBrowser\\/[VER]',\n            'Opera': [\n                ' OPR\\/[VER]',\n                'Opera Mini\\/[VER]',\n                'Version\\/[VER]'\n            ],\n            'Opera Mini': 'Opera Mini\\/[VER]',\n            'Opera Mobi': 'Version\\/[VER]',\n            'UC Browser': 'UC Browser[VER]',\n            'MQQBrowser': 'MQQBrowser\\/[VER]',\n            'MicroMessenger': 'MicroMessenger\\/[VER]',\n            'baiduboxapp': 'baiduboxapp\\/[VER]',\n            'baidubrowser': 'baidubrowser\\/[VER]',\n            'Iron': 'Iron\\/[VER]',\n            'Safari': [\n                'Version\\/[VER]',\n                'Safari\\/[VER]'\n            ],\n            'Skyfire': 'Skyfire\\/[VER]',\n            'Tizen': 'Tizen\\/[VER]',\n            'Webkit': 'webkit[ \\/][VER]',\n            'Gecko': 'Gecko\\/[VER]',\n            'Trident': 'Trident\\/[VER]',\n            'Presto': 'Presto\\/[VER]',\n            'iOS': ' \\\\bi?OS\\\\b [VER][ ;]{1}',\n            'Android': 'Android [VER]',\n            'BlackBerry': [\n                'BlackBerry[\\\\w]+\\/[VER]',\n                'BlackBerry.*Version\\/[VER]',\n                'Version\\/[VER]'\n            ],\n            'BREW': 'BREW [VER]',\n            'Java': 'Java\\/[VER]',\n            'Windows Phone OS': [\n                'Windows Phone OS [VER]',\n                'Windows Phone [VER]'\n            ],\n            'Windows Phone': 'Windows Phone [VER]',\n            'Windows CE': 'Windows CE\\/[VER]',\n            'Windows NT': 'Windows NT [VER]',\n            'Symbian': [\n                'SymbianOS\\/[VER]',\n                'Symbian\\/[VER]'\n            ],\n            'webOS': [\n                'webOS\\/[VER]',\n                'hpwOS\\/[VER];'\n            ]\n        }\n    },\n\n    /**\n     * Browser userAgent\n     */\n    ua: window.navigator.userAgent,\n\n    /**\n     * Initialize\n     */\n    init: function() {\n        this.convert();\n\n        var rules = this.mobileRegText;\n        rules.oss0 = {\n            WindowsPhoneOS: rules.oss.WindowsPhoneOS,\n            WindowsMobileOS: rules.oss.WindowsMobileOS\n        };\n        this.device =  this._findMatch(rules.phones, this.ua);\n        this.ios = this.isIOS();\n        this.android = this.isAndroid();\n    },\n\n    /**\n     * Convert device, os, browser info to reg edit.\n     */\n    convert: function() {\n        var rule,\n            mobileDetectRules = this.mobileRegText;\n\n        this._propConvert();\n\n        for (rule in mobileDetectRules) {\n            if(rule !== 'props') {\n                this._convertToRegExp(mobileDetectRules[rule]);\n            }\n        }\n    },\n\n    /**\n     * Convert property by each invironment\n     * @private\n     */\n    _propConvert: function() {\n        var key,\n            values,\n            value,\n            i,\n            len,\n            verPos,\n            hasOwnProp = Object.prototype.hasOwnProperty,\n            rules = this.mobileRegText.props;\n\n        for (key in rules) {\n            if (hasOwnProp.call(rules, key)) {\n                values = rules[key];\n                if (!tui.util.isArray(values)) {\n                    values = [values];\n                }\n                len = values.length;\n                for (i = 0; i &lt; len; ++i) {\n                    value = values[i];\n                    verPos = value.indexOf('[VER]');\n                    if (verPos >= 0) {\n                        value = value.substring(0, verPos) + '([\\\\w._\\\\+]+)' + value.substring(verPos + 5);\n                    }\n                    values[i] = new RegExp(value, 'i');\n                }\n                rules[key] = values;\n            }\n        }\n    },\n\n    /**\n     * Get userAgent\n     */\n    userAgent: function() {\n        if (tui.util.isUndefined(this.cache.userAgent)) {\n            this.cache.userAgent = this._findMatch(this.mobileRegText.uas, this.ua);\n        }\n        return this.cache.userAgent;\n    },\n\n    /**\n     * Returns all detected user-agent strings.\n     * &lt;br>\n     * The array is empty or contains one or more of following keys:&lt;br>\n     * &lt;br>&lt;tt>Chrome, Dolfin, Opera, Skyfire, IE, Firefox, Bolt, TeaShark, Blazer, Safari,\n     * Tizen, UCBrowser, baiduboxapp, baidubrowser, DiigoBrowser, Puffin, Mercury,\n     * ObigoBrowser, NetFront, GenericBrowser&lt;/tt>&lt;br>\n     * &lt;br>\n     * In most cases calling {@link MobileDetect#userAgent} will be sufficient. But there are rare\n     * cases where a mobile device pretends to be more than one particular browser. You can get the\n     * list of all matches with {@link MobileDetect#userAgents} or check for a particular value by\n     * providing one of the defined keys as first argument to {@link MobileDetect#is}.\n     *\n     * @returns {Array} the array of detected user-agent keys or &lt;tt>[]&lt;/tt>\n     * @function MobileDetect#userAgents\n     */\n    userAgents: function () {\n        if (tui.util.isUndefined(this.cache.userAgents)) {\n            this.cache.userAgents = this._findMatches(this.mobileRegText.uas, this.ua);\n        }\n        return this.cache.userAgents;\n    },\n    /**\n     * Conver to reg exp\n     * @param object\n     * @private\n     */\n    _convertToRegExp: function(object) {\n        var hasOwnProp = Object.prototype.hasOwnProperty,\n            key;\n        for (key in object) {\n            if (hasOwnProp.call(object, key)) {\n                object[key] = new RegExp(object[key], 'i');\n            }\n        }\n    },\n\n    /**\n     * Find OS\n     * @returns {*}\n     */\n    getOS: function() {\n        return this._findMatch(this.mobileRegText.oss0, this.ua) ||\n            this._findMatch(this.mobileRegText.oss, this.ua);\n    },\n\n    /**\n     * Find match useragent\n     * @private\n     */\n    _findMatch: function(rules, userAgent) {\n        var key,\n            hasOwnProp = Object.prototype.hasOwnProperty;\n        for (key in rules) {\n            if (hasOwnProp.call(rules, key)) {\n                if (rules[key].test(userAgent)) {\n                    return key;\n                }\n            }\n        }\n        return null;\n    },\n\n    /**\n     * Test userAgent string against a set of rules and return an array of matched keys.\n     * @param {Object} rules (key is String, value is RegExp)\n     * @param {String} userAgent the navigator.userAgent (or HTTP-Header 'User-Agent').\n     * @returns {Array} an array of matched keys, may be empty when there is no match, but not &lt;tt>null&lt;/tt>\n     * @private\n     */\n    _findMatches: function(rules, userAgent) {\n        var result = [],\n            hasOwnProp = Object.prototype.hasOwnProperty;\n        for (var key in rules) {\n            if (hasOwnProp.call(rules, key)) {\n                if (rules[key].test(userAgent)) {\n                    result.push(key);\n                }\n            }\n        }\n        return result;\n    },\n\n    /**\n     * Find version\n     * @returns {*}\n     */\n    version: function(propertyName) {\n        var version = this._getVersionStr(propertyName, this.ua);\n        return version ? this._prepareVersionNo(version) : NaN;\n    },\n\n    /**\n     * Check the version of the given property in the User-Agent.\n     * @param {String} propertyName\n     * @param {String} userAgent\n     * @return {String} version or &lt;tt>null&lt;/tt> if version not found\n     * @private\n     */\n    _getVersionStr: function(propertyName, userAgent) {\n        var props = this.mobileRegText.props,\n            patterns,\n            i,\n            len,\n            match,\n            hasOwnProp = Object.prototype.hasOwnProperty;\n\n        if (hasOwnProp.call(props, propertyName)) {\n            patterns = props[propertyName];\n            len = patterns.length;\n\n            for (i = 0; i &lt; len; ++i) {\n                match = patterns[i].exec(userAgent);\n                if (match !== null) {\n                    return match[1];\n                }\n            }\n        }\n        return null;\n    },\n\n    /**\n     * Prepare the version number.\n     * @param {String} version\n     * @return {Number} the version number as a floating number\n     * @private\n     */\n    _prepareVersionNo: function(version) {\n        var numbers;\n\n        numbers = version.split(/[a-z._ \\/\\-]/i);\n        if (numbers.length === 1) {\n            version = numbers[0];\n        }\n        if (numbers.length > 1) {\n            version = numbers[0] + '.';\n            numbers.shift();\n            version += numbers.join('');\n        }\n        return Number(version);\n    },\n\n    /**\n     * Whether iOS or not\n     * @returns {boolean}\n     */\n    isIOS: function() {\n        return this.getOS() === 'iOS';\n    },\n\n    /**\n     * Whether Android or not\n     * @returns {boolean}\n     */\n    isAndroid: function() {\n        return this.getOS() === 'AndroidOS';\n    }\n});\n\nmodule.exports =  AgentDetector;\n\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"