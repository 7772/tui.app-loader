tui.util.defineNamespace("fedoc.content", {});
fedoc.content["appLoader.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Load native app or move to install page\n * @dependency code-snippet.js, detectors.js, agentDetector.js\n * @author NHN Ent. FE dev team.&lt;dl_javascript@nhnent.com>\n */\n'use strict';\nvar AgentDetector = require('./agentDetector');\nvar Detector = require('./detectors');\nvar iOSDetector = require('./iosDetectors');\nvar EtcDetector = require('./etcDetectors');\nvar ad = new AgentDetector();\n/**\n * @constructor\n * @class\n */\nvar AppLoader = tui.util.defineClass(/** @lends AppLoader.prototype */{\n    /*****************\n     * static members\n     *****************/\n    static:{\n        /**\n         * Get first user agent (it will be browser name)\n         * @api\n         * @memberof AppLoader\n         * @return {string} user agent\n         * @example\n         * var AppLoader = tui.component.m.AppLoader;\n         * var ua = AppLoader.getUserAgent(); // ex) 'safari'\n         */\n        getUserAgent: function() {\n            return ad.userAgent();\n        },\n\n        /**\n         * Get all user agents by array\n         * @api\n         * @memberof AppLoader\n         * @return {Array} agent strings\n         * @example\n         * var AppLoader = tui.component.m.AppLoader;\n         * var uas = AppLoader.getUserAgents(); // ex) ['safari']\n         */\n        getUserAgents: function() {\n            return ad.userAgents();\n        },\n\n        /**\n         * Get OS\n         * @api\n         * @memberof AppLoader\n         * @return {string} os\n         * @example\n         * var AppLoader = tui.component.m.AppLoader;\n         * var os = AppLoader.getOS(); //  'iOS' or 'AndroidOS'\n         */\n        getOS: function() {\n            return ad.getOS();\n        },\n\n        /**\n         * Get version\n         * @api\n         * @memberof AppLoader\n         * @param {string} type - os type\n         * @return {number|string} version\n         * @example\n         *  getVersion('IOS');\n         *  getVersion('Chrome');\n         *  getVersion('Android');\n         */\n        getVersion: function(type) {\n            return ad.version(type);\n        }\n    },\n\n    /****************\n     * member fields\n     ****************/\n\n    /**\n     * browser, device detector\n     */\n    detector: {},\n    /**\n     * OS (android/ios/etc)\n     */\n    os: null,\n    /**\n     * default options to run exec\n     */\n    defaults: {\n        name: '',\n        ios: {\n            scheme: '',\n            url: '',\n            useIOS9: false,\n            syncToIOS9: false\n        },\n        android: {\n            scheme: '',\n            url: ''\n        }\n    },\n\n    /****************\n     * member methods\n     ****************/\n\n    /**\n     * Initialize\n     */\n    init: function() {\n        this.agentDetector = ad;\n        this.ua = ad.userAgent();\n        this.os = ad.getOS();\n        this.version = ad.version(ad.ios ? ad.device : 'Android');\n    },\n\n    /**\n     * Set os by Detector\n     * @private\n     * @param {object} context The options\n     */\n    _setDetector: function(context) {\n        var ad = this.agentDetector;\n\n        if (ad.android) { // Andriod\n            this._setAndroidDetector(context);\n        } else if (ad.ios &amp;&amp; context.iosStoreURL) { // IOS\n            this._setIOSDetector(context);\n        } else { // ETC\n           this._setEtcDetector(context);\n        }\n    },\n\n    /**\n     * Set IOS Detector\n     * @private\n     * @param {object} context The information for app\n     */\n    _setIOSDetector: function(context) {\n        var iosVersion = parseInt(this.version, 10);\n        if (context.useIOS9) {\n            if (iosVersion > 8 || context.syncToIOS9) {\n                this.detector = iOSDetector.iosFixDetector;\n            } else {\n                this.detector = (iosVersion === 8) ? iOSDetector.iosRecentDetector : iOSDetector.iosOlderDetector;\n            }\n        } else  if (iosVersion &lt; 8) {\n            this.detector = iOSDetector.iosOlderDetector;\n        } else {\n            this.detector = iOSDetector.iosRecentDetector;\n        }\n    },\n\n    /**\n     * Set android Detector\n     * @private\n     * @param {object} context The information for app\n     */\n    _setAndroidDetector: function(context) {\n        var isNotIntent = (this.isIntentLess() || tui.util.isExisty(context.useUrlScheme)),\n            isIntent = tui.util.isExisty(context.intentURI);\n        if (isNotIntent) {\n            this.detector = Detector.androidSchemeDetector;\n        } else if (isIntent) {\n            this.detector = Detector.androidIntentDetector;\n        }\n    },\n\n    /**\n     * Set EtcDetector\n     * @private\n     * @param {object} context The information for app\n     */\n    _setEtcDetector: function(context) {\n        var self = this;\n        setTimeout(function () {\n            self.detector = EtcDetector;\n            if (context.etcCallback) {\n                context.etcCallback();\n            }\n        }, 100);\n    },\n\n    /**\n     * Run selected detector\n     * @private\n     * @param {object} context The information for app\n     */\n    _runDetector: function(context) {\n        if(this.detector &amp;&amp; (this.detector.type !== EtcDetector.type)) {\n            this.detector.run(context);\n        }\n    },\n\n    /**\n     * Whether intent supported\n     * @returns {boolean}\n     */\n    isIntentLess: function() {\n        var intentlessBrowsers = [\n            'firefox',\n            'opr'\n        ];\n        var blackListRegexp = new RegExp(intentlessBrowsers.join('|'), 'i'),\n            app = this.agentDetector;\n        return blackListRegexp.test(app.ua);\n    },\n\n    /**\n     * Get os\n     * @returns {string}\n     */\n    getOS: function() {\n        return this.agentDetector.getOS();\n    },\n\n    /**\n     * Call app\n     * @api\n     * @param {object} options The option for app\n     *  @param {object} options.ios IOS app information\n     *  @param {object} options.android Android information\n     *  @param {object} options.timerSet A timer time set for callback deley time\n     *  @param {Function} options.etcCallback If unsupportable mobile\n     *  @param {Function} options.notFoundCallback It not found\n     *\n     * @example\n     * var loader = new tui.component.m.AppLoader();\n     * loader.exec({\n     *      ios: {\n     *          scheme: 'fecheck://', // iphone app scheme\n     *          url: 'itms-apps://itunes.apple.com/app/.....', // app store url,\n     *          useIOS9: true,\n     *          syncToIOS9: false,\n     *          universalLink: 'app:///links/'\n     *      },\n     *      android: {\n     *          intentURI: 'intent://home#Intent;scheme=fecheck;package=com.fecheck;end' // android intent uri\n     *      },\n     *      timerSet: { // optional values\n     *          ios: 2000, // default: 2000\n     *          android: 1000 // default: 800\n     *      },\n     *      notFoundCallback: function() {\n     *          alert('not found');\n     *      },\n     *      etcCallback: function() {\n     *          alert('etc');\n     *      }\n     * });\n     */\n    exec: function(options) {\n        var timerSet, context;\n\n        options = tui.util.extend(this.defaults, options);\n        timerSet = options.timerSet;\n        context = {\n            urlScheme: options.ios.scheme,\n            iosStoreURL: options.ios.url,\n            syncToIOS9: options.ios.syncToIOS9,\n            useIOS9: options.ios.useIOS9,\n            universalLink: options.ios.universalLink,\n            intentURI: options.android.intentURI,\n            useIframe: options.android.useIframe,\n            onErrorIframe: options.android.onErrorIframe,\n            etcCallback: options.etcCallback,\n            notFoundCallback: options.notFoundCallback\n        };\n\n        this._setDetector(context);\n        if (timerSet) {\n            this._setTimerTime(timerSet);\n        }\n        this._runDetector(context);\n    },\n\n    /**\n     * Set timer time set\n     * @param {object} timerSet A set of timer times\n     */\n    _setTimerTime: function(timerSet) {\n        if (!this.detector.TIMEOUT) {\n            this.detector.TIMEOUT = {};\n        }\n        this.detector.TIMEOUT.IOS = timerSet.ios || this.detector.TIMEOUT.IOS;\n        this.detector.TIMEOUT.ANDROID = timerSet.android || this.detector.TIMEOUT.ANDROID;\n    }\n});\n\nmodule.exports = AppLoader;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"