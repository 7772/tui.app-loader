ne.util.defineNamespace("fedoc.content", {});
fedoc.content["appLoader.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Load native app or move to install page\n * @dependency code-snippet.js, detectors.js, agentDetector.js\n * @author NHN Ent. FE dev team.&lt;dl_javascript@nhnent.com>\n */\n\nvar AgentDetector = require('./agentDetector');\nvar Detector = require('./detectors');\nvar iOSDetector = require('./iosDetectors');\nvar EtcDetector = require('./etcDetectors');\n/**\n * @constructor\n * @class\n */\nvar AppLoader = tui.util.defineClass(/** @lends AppLoader.prototype */{\n\n    /****************\n     * member fields\n     ****************/\n\n    /**\n     * browser, device detector\n     */\n    detector: null,\n    /**\n     * OS (android/ios/etc)\n     */\n    os: null,\n    /**\n     * default options to run exec\n     */\n    defaults: {\n        name: '',\n        ios: {\n            scheme: '',\n            url: '',\n            useIOS9: false,\n            syncToIOS9: false\n        },\n        android: {\n            scheme: ''\n        },\n    },\n\n    /****************\n     * member methods\n     ****************/\n\n    /**\n     * Initialize\n     */\n    init: function() {\n        var ad = this.agentDetector = new AgentDetector();\n        this.ua = ad.userAgent();\n        this.os = ad.getOS();\n        this.version = ad.version(ad.ios ? ad.device : 'Android');\n    },\n\n    /**\n     * Set os by Detector\n     * @private\n     * @param {object} context The options\n     */\n    _setDetector: function(context) {\n        var self = this,\n            isNotIntend = (this.isIntentLess() || tui.util.isExisty(context.useUrlScheme)),\n            isIntend = tui.util.isExisty(context.intentURI),\n            store = context.storeURL,\n            ad = this.agentDetector;\n\n        if (ad.android &amp;&amp; this.version >= context.andVersion) { // Andriod\n            this._setAndroidDetector(context);\n        } else if (ad.ios &amp;&amp; store) {// IOS\n            this._setIOSDetector(context);\n        } else { // ETC\n           this._setEtcDetector(context);\n        }\n    },\n\n    /**\n     * Set IOS Detector\n     * @private\n     * @param {object} context The information for app\n     */\n    _setIOSDetector: function(context) {\n        var iosVersion = parseInt(this.version, 10);\n        if (context.useIOS9) {\n            if (iosVersion > 8 || context.syncToIOS9) {\n                this.detector = iOSDetector.iosFixDetector;\n            } else {\n                this.detector = (iosVersion === 8) ? iOSDetector.iosRecentDetector : iOSDetector.iosOlderDetector;\n            }\n        } else  {\n            if (iosVersion &lt; 8) {\n                this.detector = iOSDetector.iosOlderDetector;\n            } else {\n                this.detector = iOSDetector.iosRecentDetector;\n            }\n        }\n    },\n\n    /**\n     * Set android Detector\n     * @private\n     * @param {object} context The information for app\n     */\n    _setAndroidDetector: function(context) {\n        var isNotIntend = (this.isIntentLess() || tui.util.isExisty(context.useUrlScheme)),\n            isIntend = tui.util.isExisty(context.intentURI);\n        if (isNotIntend &amp;&amp; store) {\n            this.detector = Detector.androidSchemeDetector;\n        } else if (isIntend) {\n            this.detector = Detector.androidIntendDetector;\n        }\n    },\n\n    /**\n     * Set EtcDetector\n     * @private\n     * @param {object} context The information for app\n     */\n    _setEtcDetector: function(context) {\n        var self = this;\n        setTimeout(function () {\n            self.detector = EtcDetector;\n            if (context.etcCallback) {\n                context.etcCallback();\n            }\n        }, 100);\n    },\n\n    /**\n     * Run selected detector\n     * @private\n     * @param {object} context The information for app\n     */\n    _runDetector: function(context) {\n        if(this.detector &amp;&amp; (this.detector.type !== EtcDetector.type)) {\n            this.detector.run(context);\n        }\n    },\n\n    /**\n     * Whether intent supported\n     * @returns {boolean}\n     */\n    isIntentLess: function() {\n        var intentlessBrowsers = [\n            'firefox',\n            'opr'\n        ];\n        var blackListRegexp = new RegExp(intentlessBrowsers.join('|'), 'i'),\n            app = this.agentDetector;\n        return blackListRegexp.test(app.ua);\n    },\n\n    /**\n     * Get os\n     * @returns {string}\n     */\n    getOS: function() {\n        return this.agentDetector.getOS();\n    },\n\n    /**\n     * Call app\n     * @param {object} options The option for app\n     *  @param {string} options.name An application name\n     *  @param {object} options.ios IOS app information\n     *  @param {object} options.android Android information\n     *  @param {object} options.timerSet A timer time set for callback deley time\n     *\n     * @example\n     * var loader = new tui.component.AppLoader();\n     * loader.exec({\n     *      name: 'app', // application Name (ex. facebook, twitter, daum)\n     *      ios: {\n     *          scheme: 'fecheck://', // iphone app scheme\n     *          url: 'itms-apps://itunes.apple.com/app/.....' // app store url,\n     *          useIOS9: true,\n     *          syncIOS9: false\n     *      },\n     *      android: {\n     *          scheme: 'intent://home#Intent;scheme=fecheck;package=com.fecheck;end' // android intent uri\n     *      },\n     *      timerSet: {\n     *          ios: {\n     *              long: 3000,\n     *              short: 2000\n     *          },\n     *          and: 1000\n     *      },\n     *      notFoundCallback: function() {\n     *          alert('not found');\n     *      },\n     *      etcCallback: function() {\n     *          alert('etc');\n     *      }\n     *  });\n     */\n    exec: function(options) {\n        options = tui.util.extend(this.defaults, options);\n        var context = {\n            appName: options.name,\n            urlScheme: options.ios.scheme,\n            storeURL: options.ios.url,\n            intentURI: options.android.scheme,\n            etcCallback: options.etcCallback,\n            notFoundCallback: options.notFoundCallback,\n            andVersion: options.android.version,\n            syncToIOS9: options.ios.syncToIOS9,\n            useIOS9: options.ios.useIOS9\n        }, timerSet = options.timerSet;\n\n        this._setDetector(context);\n\n        if (timerSet) {\n            this._setTimerTime(timerSet);\n        }\n\n        this._runDetector(context);\n    },\n\n    /**\n     * Set timer time set\n     * @param {object} timerSet A set of timer times\n     */\n    _setTimerTime: function(timerSet) {\n        this.detector.TIMEOUT.IOS_SHORT = timerSet.ios.short || this.detector.TIMEOUT.IOS_SHORT;\n        this.detector.TIMEOUT.IOS_LONG = timerSet.ios.long || this.detector.TIMEOUT.IOS_LONG;\n        this.detector.TIMEOUT.ANDROID = timerSet.and || this.detector.TIMEOUT.ANDROID;\n    }\n});\n\nmodule.exports = AppLoader;\n\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"